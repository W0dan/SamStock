@model SAMStock.Web.Models.Pedal.PedalUpdateComponentsViewModel
@{
    Layout = "../Shared/_Layout.cshtml";
}
@section head
{
    <link href="@Url.Content("~/Content/styles/Pedal/UpdateComponents.css")" rel="stylesheet" type="text/css" />
}
@section navigation
{
    @Html.Partial("_Navigation")
}
@section body
{
    <h1>Edit Components</h1>
    <table>
    <tbody>
            <tr>
                <th>ID</th>
                <!-- <th>Item Code</th>
                <th>Item Category</th> -->
                <th>Description</th>
                <th>Quantity</th>
                <th>Unit Price</th>
                <th>Extended Price</th>
                <th>Stock</th>
            </tr>
            <tr>
                @using (Html.BeginForm("UpdateComponents", "Pedal"))
                {
                    @Html.HiddenFor(x => x.Id)
                    
                    <td>
                        @Html.TextBox("Stocknr", "", new Dictionary<String, Object>{
                            {"title","At least 1 letter, no spaces"},
                            {"pattern","[a-z|A-Z]+.+"}
                        })
                    </td>
                    <!-- <td></td>
                    <td></td> -->
                    <td></td>
                    <td>
                        @Html.TextBox("Quantity", "", new Dictionary<String, Object>{
                            {"title","A valid quantity"},
                            {"pattern","[\\-]{0,1}[0-9]+"}
                        })
                    </td>
                    <td></td>
                    <td></td>
                    <td>
                        <button>Add</button>
                    </td>
                }
            </tr>
            @{
                String[] categories = {
                    "Hardware",
                    "Potentiometer",
                    "IC",
                    "Transistor",
                    "Diode",
                    "LED",
                    "Resistor",
                    "Capacitor",
                    "Special"
                };
            }
            @foreach (String cat in categories)
            {
                var list = Model.Components.Where(x => x.ItemCategory.IndexOf(cat) == 0).OrderBy(x => x.ItemCategory + x.ItemCode).ToList();
                if (list.Count > 0)
                {
                    <tr>
                        <td class="categoryHeader" colspan="6">@cat</td>
                    </tr>
                    foreach (var item in list)
                    {
                    <tr>
                        <td class="description">@item.Stocknr</td>
                        <!-- <td class="description">@item.ItemCode</td>
                        <td class="description">@item.ItemCategory</td> -->
                        <td class="description">@item.Description</td>
                        @if (item.Stock >= item.Quantity)
                        {
                            <td class="detail">@item.Quantity</td>
                        }
                        else
                        {
                            <td class="detail stockDeficiency">@item.Quantity</td>
                        }
                        <td class="detail">€@item.Price.ToString("0.00")</td>
                        <td class="detail">€@((item.Price * item.Quantity).ToString("0.00"))</td>
                        <td class="detail">@(item.Stock)</td>
                    </tr>
                    }
                }
            }
        </tbody>
    </table>
    <br />
    <a class="button navigation" href="@Url.Action("Details", "Pedal", new { Model.Id })">Back</a>